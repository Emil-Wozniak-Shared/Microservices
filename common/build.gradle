//file:noinspection GroovyAssignabilityCheck
plugins {
    id "java-library"
    id "maven-publish"
    id "org.springframework.boot" version "2.5.5"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.jetbrains.kotlin.jvm" version "1.5.30"
    id "org.jetbrains.kotlin.plugin.spring" version "1.5.30"
}

group = "pl.emil"
version = "0.1.1-SNAPSHOT"
sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    set("testcontainersVersion", "1.16.0")
}

def jsonwebtoken(target, version = "0.11.1", runtime = true) {
    dependencies {
        if (runtime) runtimeOnly("io.jsonwebtoken:jjwt-${target}:$version")
        else implementation("io.jsonwebtoken:jjwt-${target}:$version")
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-data-r2dbc")
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("io.projectreactor.kotlin:reactor-kotlin-extensions")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")
    implementation("io.swagger.core.v3:swagger-annotations:2.1.11")
    implementation("org.springdoc:springdoc-openapi-webflux-ui:1.5.12")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("io.projectreactor:reactor-test")
    testImplementation("org.testcontainers:junit-jupiter")

    jsonwebtoken("api", "0.11.1", false)
    jsonwebtoken("impl")
    jsonwebtoken("jackson")
}

dependencyManagement {
    imports {
        mavenBom("org.testcontainers:testcontainers-bom:${property("testcontainersVersion")}")
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

// @see: https://docs.gradle.org/current/userguide/publishing_maven.html
publishing {
    publications {
        mavenJava(MavenPublication) {
            group = "pl.emil"
            artifactId = "common"
            from components.java
            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }
            pom {
                name = "Microservice Commons"
                description = "A concise description of my library"
                url = "http://www.example.com/library"
                properties = [
                        "URI"           : "value",
                        "prop.with.dots": "anotherValue"
                ]
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "e.wozniak"
                        name = "Emil Wo≈∫niak"
                        email = "emil.wozniak.2020@gmail.com"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = uri(layout.buildDirectory.dir("repos/releases"))
            def snapshotsRepoUrl = uri(layout.buildDirectory.dir("repos/snapshots"))
            url = (version.toString().endsWith("SNAPSHOT")) ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

kotlin {
    sourceSets {
        commonTest {
            dependencies {
                implementation kotlin("test")
            }
        }
    }
}

