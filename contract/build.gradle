//file:noinspection GroovyAssignabilityCheck
import static java.io.File.separator

//file:noinspection GroovyAssignabilityCheck
plugins {
    id "java-library"
    id "maven-publish"
    id("org.springframework.boot") version "2.5.5"
    id("io.spring.dependency-management") version "1.0.11.RELEASE"
    id "org.jetbrains.kotlin.jvm" version "1.5.31"
    id "org.jetbrains.kotlin.plugin.spring" version "1.5.31"
    id("org.openapi.generator") version "5.2.1"
}

group = "pl.emil"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = 11
targetCompatibility = 11
project.ext {
    // API client version
    clientVersion = '1.0.1'
}

repositories {
    mavenLocal()
    mavenCentral()
}

def springdoc(target, version = "1.5.11") {
    dependencies {
        implementation("org.springdoc:springdoc-openapi-$target:$version")
    }
}

dependencies {
    springdoc("kotlin")
    springdoc("webflux-ui")
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}

test {
    useJUnitPlatform()
}

openApiGenerate {
    verbose = false
    generatorName = "kotlin"
    groupId = "pl.emil"
    packageName = "contract"
    inputSpec = "$rootDir/src/main/resources/api.json".toString()
    outputDir = "$buildDir/generated".toString()
    apiPackage = "pl.emil.contract.api"
    invokerPackage = "pl.emil.contract.invoker"
    modelPackage = "pl.emil.contract.model"
    configOptions = [dateLibrary: "java8"]
    generateModelTests = true
    generateApiTests = true
    version = "${project.clientVersion}"
    logToStderr = true
    configOptions = [
            dateLibrary: "java8"
    ]
    globalProperties = [
            modelDocs: "true"
    ]
}

java {
    withJavadocJar()
    withSourcesJar()
}

String artifactPath() {
    return project(":").fileTree("build").filter { File it -> it.path.contains("kotlin-client-${project.clientVersion}-sources") }.empty
            ? "./build/generated/build/libs/kotlin-client-${project.clientVersion}.jar".toString()
            : "./build/generated/build/libs/kotlin-client-${project.clientVersion}-sources.jar".toString()
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'contract-api'
            from components.java
            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }
            pom {
                name = "Microservice Commons"
                url = "http://localhost:8080/"
                developers {
                    developer {
                        id = "e.wozniak"
                        name = "Emil Woźniak"
                        email = "emil.wozniak.2020@gmail.com"
                    }
                }
            }
        }
        binaryAndSources(MavenPublication) {
            version "plain-${clientVersion}"
            groupId = 'pl.emil'
            artifactId = 'contract'
            artifact artifactPath()
        }
        // @see: https://docs.gradle.org/current/userguide/publishing_maven.html
        contract(MavenPublication) {
            version "${clientVersion}"
            groupId = 'pl.emil'
            artifactId = 'contract'
            artifact "./build/generated/build/libs/kotlin-client-${project.clientVersion}.jar".toString()
            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }
            pom {
                name = "Microservice Commons"
                url = "http://localhost:8080/"
                developers {
                    developer {
                        id = "e.wozniak"
                        name = "Emil Woźniak"
                        email = "emil.wozniak.2020@gmail.com"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = (version.toString().endsWith("SNAPSHOT"))
                    ? uri(layout.buildDirectory.dir("repos/snapshots"))
                    : uri(layout.buildDirectory.dir("repos/releases"))
        }
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

def ANSI_RESET = '\033[0m'
def ANSI_GREEN = '\033[32m'
def ANSI_YELLOW = '\033[33m'
def ANSI_BLUE = '\033[34m'

//noinspection GroovyAssignabilityCheck
task openApi(type: GradleBuild) {
    doFirst {
        logger.lifecycle("${ANSI_BLUE}>> Create API${ANSI_RESET}")
    }
    buildFile ".${separator}build.gradle"
    tasks = ['clean', 'openApiGenerate']
}

task buildApi(type: GradleBuild) {
    //noinspection GroovyAssignabilityCheck
    doFirst {
        logger.lifecycle("${ANSI_BLUE}>> Build API${ANSI_RESET}")
    }
    dependsOn(openApi)
    buildFile ".${separator}build${separator}generated${separator}build.gradle"
    dir = ".${separator}build${separator}generated${separator}"
    tasks = ['build']
    doLast {
        logger.lifecycle("${ANSI_GREEN}  * buildApi -> FINISHED${ANSI_RESET}")
    }
}

task publishApi() {
    try {
        def apiBuildFile = "build${separator}generated${separator}build.gradle"
        assert project.clientVersion != null: "You must have API client version set to not null"
        dependsOn(buildApi)
        finalizedBy(publishToMavenLocal)
        System.setProperty('org.gradle.color.error', 'BLUE')
        doLast {
            logger.warn("""
${ANSI_BLUE}<< Publish${ANSI_RESET}

  * Publish pl.emil:contract:${project.clientVersion}
${ANSI_YELLOW}
        Contract was created without sources and javadocs
        
        If you concider to have it you must append below code to build file in path
        ${apiBuildFile}
        \033[93m
        java {
            withJavadocJar()
            withSourcesJar()
        }
${ANSI_RESET}
""".toString())
        }
    } catch (e) {
        e.printStackTrace()
    }
}

//noinspection GroovyAssignabilityCheck
gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (state.failure) {
        logger.error("[[${task.getName()}]] ${new Date()} : Failed")
    } else {
        if (task.name == "openAPi" || task.name == "buildApi" || task.name == "publishApi") {
            logger.lifecycle("${ANSI_BLUE}[[${task.getName()}]]${ANSI_RESET} ${new Date()} : ${ANSI_GREEN}Done${ANSI_RESET}")
        }
    }
}
