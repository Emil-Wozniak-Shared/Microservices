plugins {
    id "java"
    id "maven"
    id "idea"
    id "org.jetbrains.kotlin.jvm" version "1.5.30"
    id "org.jetbrains.kotlin.plugin.spring" version "1.5.30"
    id("io.kotest") version "0.3.8"
    id("org.springframework.boot") version "2.5.5"
    id("io.spring.dependency-management") version "1.0.11.RELEASE"
    id "com.github.spotbugs-base" version "4.7.9"
}

group = "pl.emil"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = 11
targetCompatibility = 11

apply from: './gradle-addons/core.gradle'
apply from: './gradle-addons/jetbrains.gradle'
apply from: './gradle-addons/kotest.gradle'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation("org.springframework.cloud:spring-cloud-starter-netflix-eureka-server")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    implementation("org.glassfish.jaxb:jaxb-runtime")
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.11.0'
}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}

task addCommon(type: GradleBuild) {
    doLast {
        println 'Done'
    }
    println ">> Add common"
    println "  * Create project common"
    buildFile './common/build.gradle'
    tasks = ['publishToMavenLocal']

    println ">> Add Contract"
    println "  * Create project contract"
    buildFile './contract/build.gradle'
    tasks = ['publishApi']
}


task spotbugsMain(type: com.github.spotbugs.snom.SpotBugsTask) {
    dependsOn 'classes'
    classDirs = sourceSets.main.output
    sourceDirs = sourceSets.main.allSource.sourceDirectories
    auxClassPaths = sourceSets.main.compileClasspath
    reports { html.enabled = true }
}
