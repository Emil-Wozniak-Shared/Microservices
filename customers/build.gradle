plugins {
    id "java"
    id "idea"
    id 'groovy'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.spring'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'org.springframework.cloud.contract'
    id "io.kotest" version "0.3.7"
}

apply from: "../gradle-addons/core.gradle"
apply from: "../gradle-addons/spring.gradle"
apply from: '../gradle-addons/kotest.gradle'

group = "pl.emil"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_11

//noinspection GroovyAssignabilityCheck
repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/release" }
}

ext {
    set('springCloudVersion', "${BOM_VERSION}")
    set('json-path.version', '2.6.0')
}

dependencies {
    implementation group: "pl.emil", name: "common", version: "0.1.1-SNAPSHOT"
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("io.projectreactor.kotlin:reactor-kotlin-extensions")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")
    implementation("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
    implementation("io.swagger.core.v3:swagger-annotations:2.1.11")
    implementation("org.springdoc:springdoc-openapi-webflux-ui:1.5.12")
    implementation("org.springframework.boot:spring-boot-configuration-processor:2.5.6")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("io.projectreactor:reactor-test")
    testImplementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation("org.springframework.cloud:spring-cloud-starter-contract-verifier")
    testImplementation("org.springframework.cloud:spring-cloud-starter-contract-stub-runner")
    testImplementation("org.spockframework:spock-core:$spockVersion")
    testImplementation("org.spockframework:spock-spring:$spockVersion")
    testImplementation "org.spockframework:spock-spring:$spockVersion"
    testImplementation("org.codehaus.groovy:groovy-all:$groovyVersion")
    testImplementation 'com.h2database:h2:1.4.200'

}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    }
}

contracts {
    testFramework = "SPOCK"
    contractsMode = "LOCAL"
    packageWithBaseClasses = "pl.emil.customers.spec"
    baseClassForTests = "pl.emil.customers.spec"
    baseClassMappings {
        baseClassMapping(".*", "pl.emil.customers.spec.BaseSpec")
    }
}

contractTest {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
    //noinspection GroovyAssignabilityCheck
    afterSuite { desc, result ->
        if (!desc.parent) {
            logger.lifecycle "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            boolean skipTests = Boolean.parseBoolean((project.findProperty('SKIP_TESTS') ?: "false") as String)
            if (result.testCount == 0 && !skipTests) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}

task addCommon(type: GradleBuild) {
    doLast {
        logger.lifecycle 'Done'
    }
    logger.lifecycle "Add common"
    logger.lifecycle "Create project common"
    buildFile '../common/build.gradle'
    tasks = ['publishToMavenLocal']
}
